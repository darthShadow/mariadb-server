--echo #
--echo # MDEV-12459: The information_schema tables for getting temporary tables
--echo #             info is missing, at least for innodb, there is no
--echo #             INNODB_TEMP_TABLE_INFO
--echo #

# Save the initial number of concurrent sessions
--source include/count_sessions.inc
--source include/have_innodb.inc

--echo # -------------------------------
--echo # Test shadowing of a base table
--echo # -------------------------------

connect (con1,localhost,root,,test,,);
--echo # Test the warning is raised
create table t(t int);
# This should give warning, since the user can see the table and the name of a
# temporary table in the same connection is shadowing the base table name
create temporary table t(t int);

# Create user without any privileges
create user foo@localhost identified by 'bar';

--echo # Test shadowing of the base table for user with no privileges - no warning
connect (con2,localhost,foo,bar,test,,);
show grants for current_user();
show tables;
# User has no grants and cannot see `test.t` and below shouldn't raise any warning
create temporary table t(t int);
show warnings;
show create table t;
disconnect con2;

--echo # Give the privileges to the user
connection con1;
grant all privileges on *.* to foo@localhost with grant option;

--echo # Test shadowing of the base table for user that has valid privileges - warning
connect (con2,localhost,foo,bar,test,,);
show grants for current_user();
show tables;
# The same test as above, but now the user has grants and should see the warning
create temporary table t(t int);
show create table t;
show warnings;
disconnect con2;

--echo # Clean the user
connection con1;
drop table t;
drop table t;
drop user foo@localhost;

--echo # ------------------------
--echo # IS.tables tests
--echo # ------------------------
connection default;

--echo # Create first temporary table
create temporary table test.t_temp(t int);
insert into t_temp values (1),(2), (3);

--echo # Show results
--vertical_results
select table_schema, table_name, temporary from  information_schema.tables where table_type='temporary';

--echo # Create the base table with the same name (both should be visible)
# Create the base table with the same name as temporary table.
create table test.t_temp(t int);
insert into t_temp values (-1),(-2);

--echo # Show results
--vertical_results
select table_schema, table_name, temporary from  information_schema.tables where table_type='temporary';

create database my_db;
--echo # Create the temporary table with the same name in new DB
create temporary table my_db.t_temp (t int);
insert into my_db.t_temp values (-2),(-1);
--echo # Show results
--vertical_results
select table_schema, table_name, temporary from  information_schema.tables where table_type='temporary';

connection con1;

--echo # Create the temporary table with the same name in new connection
create temporary table test.t_temp(t int);
insert into t_temp values (4),(5),(6), (7);
--echo # Show results
--vertical_results
select table_schema, table_name, temporary from  information_schema.tables where table_type='temporary';

connection default;

--echo # Show results in default connection
--vertical_results
select table_schema, table_name, temporary from  information_schema.tables where table_type='temporary';

--echo # Create a warning on `Create` statement if the new temporary table
--echo # shadows base table - note there is no warning vice versa.
create table test.my_t (t int);
create temporary table test.my_t (t int);
show warnings;

--echo # Show results
--vertical_results
select table_schema, table_name, temporary from  information_schema.tables where table_type='temporary';

# First we are removing temporary table and after base table
drop table test.my_t;
drop table test.my_t;

disconnect con1;

# First we are removing temporary table and after base table
drop table test.t_temp;
drop table test.t_temp;
drop database my_db;

# Wait till all disconnects are completed
--source include/wait_until_count_sessions.inc
